import { promises } from "fs";
import { join } from "path";

const DOCS_PATH = "./docs/user";
const OUTPUT_PATH = "./src/generatedDocs.ts";

async function readMarkdown(filePath) {
  return promises.readFile(filePath, "utf-8");
}

async function getTitleAndContent(filePath, fallbackName) {
  const content = await readMarkdown(filePath);
  const lines = content.split("\n").map((line) => line.trim());

  let title = fallbackName;

  if (lines.length > 0 && lines[0].startsWith("# ")) {
    title = lines[0].substring(2).trim();
  }

  return { title, content };
}

async function generate() {
  const apps = [];

  const files = await promises.readdir(DOCS_PATH);

  let generalUsage = "";

  for (const entry of files) {
    const fullPath = join(DOCS_PATH, entry);
    const stat = await promises.stat(fullPath);

    if (entry === "generalUsage.md") {
      generalUsage = await readMarkdown(fullPath);
    } else if (stat.isDirectory()) {
      const sections = [];
      const sectionFiles = await promises.readdir(fullPath);
      for (const sectionFile of sectionFiles) {
        const sectionPath = join(fullPath, sectionFile);
        const { title, content } = await getTitleAndContent(
          sectionPath,
          sectionFile.replace(".md", "").replace(/_/g, " "), // Use file name as title
        );

        sections.push({
          title: title,
          content,
        });
      }
      apps.push({
        appName: entry.replace(/_/g, " "), // Convert directory name to app name
        sections,
      });
    }
  }

  const doc = {
    generalUsage,
    applications: apps,
  };

  const fileContent = `/* eslint-disable */ 
/**
*File generated by generateDocs.js from /docs/user.
*Do not edit this file directly.
*/

import { UserDocumentation } from '@dirac-grid/diracx-web-components/types';

export const userDocumentation: UserDocumentation = ${JSON.stringify(doc, null, 2)};
`;

  await promises.writeFile(OUTPUT_PATH, fileContent, "utf-8");
}

generate().catch(console.error);
